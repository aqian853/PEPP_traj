### July 10th - GMM2 for Total LV1, LV1, and Total SANS (clean, up to 18 months)

library(tidyverse)
library(haven)
library(dplyr)
library(tidyr)
library(ggplot2)
library(psych)
library(nFactors)
library(lcmm)
library(RColorBrewer)
library(ggalluvial)
library(reshape2)

PEPP_2024_12_12_IDmatched <- read_sav(
  "PEPP_2024-12-12-IDmatched.sav")

#Total CDSS Scores
PEPP_2024_12_12_IDmatched <- PEPP_2024_12_12_IDmatched %>%
  rename(
    cdss_total_baseline = CDS_0, #total cds score at baseline
    cdss_total_1mo = CDS_1, #total cds score at 1-mo follow up
    cdss_total_2mo = CDS_2, #total cds score at 2-mo follow up
    cdss_total_3mo = CDS_3, #total cds score at 3-mo follow up
    cdss_total_6mo = CDS_6, #total cds score at 6-mo follow up
    cdss_total_9mo = CDS_9, #total cds score at 9-mo follow up
    cdss_total_12mo = CDS_12, #total cds score at 12-mo follow up
    cdss_total_18mo = CDS_18, #total cds score at 18-mo follow up
    cdss_total_24mo = CDS_24 #total cds score at 24-mo follow up
  )

#Individual item scores for baseline
PEPP_2024_12_12_IDmatched <- PEPP_2024_12_12_IDmatched %>%
  rename(
    cdss_1_baseline = cd1_0,
    cdss_2_baseline = cd2_0,
    cdss_3_baseline = cd3_0,
    cdss_4_baseline = cd4_0,
    cdss_5_baseline = cd5_0,
    cdss_6_baseline = cd6_0,
    cdss_7_baseline = cd7_0,
    cdss_8_baseline = cd8_0,
    cdss_9_baseline = cd9_0
  )

#Individual item scores for month 1
PEPP_2024_12_12_IDmatched <- PEPP_2024_12_12_IDmatched %>%
  rename(
    cdss_1_1mo = cd1_1,
    cdss_2_1mo = cd2_1,
    cdss_3_1mo = cd3_1,
    cdss_4_1mo = cd4_1,
    cdss_5_1mo = cd5_1,
    cdss_6_1mo = cd6_1,
    cdss_7_1mo = cd7_1,
    cdss_8_1mo = cd8_1,
    cdss_9_1mo = cd9_1
  )

#Individual item scores for month 2
PEPP_2024_12_12_IDmatched <- PEPP_2024_12_12_IDmatched %>%
  rename(
    cdss_1_2mo = cd1_2,
    cdss_2_2mo = cd2_2,
    cdss_3_2mo = cd3_2,
    cdss_4_2mo = cd4_2,
    cdss_5_2mo = cd5_2,
    cdss_6_2mo = cd6_2,
    cdss_7_2mo = cd7_2,
    cdss_8_2mo = cd8_2,
    cdss_9_2mo = cd9_2
  )

#Individual item scores for month 3
PEPP_2024_12_12_IDmatched <- PEPP_2024_12_12_IDmatched %>%
  rename(
    cdss_1_3mo = cd1_3,
    cdss_2_3mo = cd2_3,
    cdss_3_3mo = cd3_3,
    cdss_4_3mo = cd4_3,
    cdss_5_3mo = cd5_3,
    cdss_6_3mo = cd6_3,
    cdss_7_3mo = cd7_3,
    cdss_8_3mo = cd8_3,
    cdss_9_3mo = cd9_3
  )

#Individual item scores for month 6
PEPP_2024_12_12_IDmatched <- PEPP_2024_12_12_IDmatched %>%
  rename(
    cdss_1_6mo = cd1_6,
    cdss_2_6mo = cd2_6,
    cdss_3_6mo = cd3_6,
    cdss_4_6mo = cd4_6,
    cdss_5_6mo = cd5_6,
    cdss_6_6mo = cd6_6,
    cdss_7_6mo = cd7_6,
    cdss_8_6mo = cd8_6,
    cdss_9_6mo = cd9_6
  )

#Individual item scores for month 9
PEPP_2024_12_12_IDmatched <- PEPP_2024_12_12_IDmatched %>%
  rename(
    cdss_1_9mo = cd1_9,
    cdss_2_9mo = cd2_9,
    cdss_3_9mo = cd3_9,
    cdss_4_9mo = cd4_9,
    cdss_5_9mo = cd5_9,
    cdss_6_9mo = cd6_9,
    cdss_7_9mo = cd7_9,
    cdss_8_9mo = cd8_9,
    cdss_9_9mo = cd9_9
  )

#Individual item scores for month 12
PEPP_2024_12_12_IDmatched <- PEPP_2024_12_12_IDmatched %>%
  rename(
    cdss_1_12mo = cd1_12,
    cdss_2_12mo = cd2_12,
    cdss_3_12mo = cd3_12,
    cdss_4_12mo = cd4_12,
    cdss_5_12mo = cd5_12,
    cdss_6_12mo = cd6_12,
    cdss_7_12mo = cd7_12,
    cdss_8_12mo = cd8_12,
    cdss_9_12mo = cd9_12
  )

#Individual item scores for month 18
PEPP_2024_12_12_IDmatched <- PEPP_2024_12_12_IDmatched %>%
  rename(
    cdss_1_18mo = cd1_18,
    cdss_2_18mo = cd2_18,
    cdss_3_18mo = cd3_18,
    cdss_4_18mo = cd4_18,
    cdss_5_18mo = cd5_18,
    cdss_6_18mo = cd6_18,
    cdss_7_18mo = cd7_18,
    cdss_8_18mo = cd8_18,
    cdss_9_18mo = cd9_18
  )

#Individual item scores for month 24
PEPP_2024_12_12_IDmatched <- PEPP_2024_12_12_IDmatched %>%
  rename(
    cdss_1_24mo = cd1_24,
    cdss_2_24mo = cd2_24,
    cdss_3_24mo = cd3_24,
    cdss_4_24mo = cd4_24,
    cdss_5_24mo = cd5_24,
    cdss_6_24mo = cd6_24,
    cdss_7_24mo = cd7_24,
    cdss_8_24mo = cd8_24,
    cdss_9_24mo = cd9_24
  )

## Get non-na counts
# recode 77 as NA
PEPP_2024_12_12_IDmatched <- PEPP_2024_12_12_IDmatched %>%
  mutate(across(starts_with("cdss"), ~ replace(., . == 77, NA)))

## Subset data for relevant clinical scores and non-NAs at baseline
PEPP_cdss_subset <- PEPP_2024_12_12_IDmatched %>%
  select( contains("pin"), contains("FEP_ID"),contains("Scan_ID"), contains("cdss_"))

colnames(PEPP_cdss_subset)

PEPP_cdss_subset <- PEPP_cdss_subset %>%
  filter(!is.na(cdss_total_baseline))

#Total global score w/o attention items
PEPP_2024_12_12_IDmatched <- PEPP_2024_12_12_IDmatched %>%
  rename(
    sans_total_baseline = SANS_0, #total SANS score at baseline
    sans_total_1mo = SANS_1, #total SANS score at 1-mo follow up
    sans_total_2mo = SANS_2, #total SANS score at 2-mo follow up
    sans_total_3mo = SANS_3, #total SANS score at 3-mo follow up
    sans_total_6mo = SANS_6, #total SANS score at 6-mo follow up
    sans_total_9mo = SANS_9, #total SANS score at 9-mo follow up
    sans_total_12mo = SANS_12, #total SANS score at 12-mo follow up
    sans_total_18mo = SANS_18, #total SANS score at 18-mo follow up
    sans_total_24mo = SANS_24 #total SANS score at 24-mo follow up
  )

# Recoding NA
PEPP_2024_12_12_IDmatched <- PEPP_2024_12_12_IDmatched %>%
  mutate(across(starts_with("sans"), ~ replace(., . == 77, NA)))

# Subsetting
PEPP_sans_subset <- PEPP_2024_12_12_IDmatched %>%
  select( contains("pin"), contains("FEP_ID"),contains("Scan_ID"), contains("sans_"))

colnames(PEPP_sans_subset)

PEPP_sans_subset <- PEPP_sans_subset %>%
  filter(!is.na(sans_total_baseline))

############ Converting to Long data 
## Clean out those with less than 2 time points [clean] and remove 24mo

## Total CDSS
PEPP_cdss_long <- 
  PEPP_cdss_subset %>%
  select(pin, cdss_total_baseline, cdss_total_1mo, cdss_total_2mo, cdss_total_3mo,
         cdss_total_6mo, cdss_total_9mo, cdss_total_12mo, cdss_total_18mo, 
         cdss_total_24mo) %>%
  pivot_longer(cols = starts_with("cdss_total_"), names_to = "time_point", values_to = "cdss_score")

PEPP_cdss_long <- PEPP_cdss_long %>%
  mutate(pin = as.numeric(pin),
         time_point = recode(time_point,
                             "cdss_total_baseline" = "0",
                             "cdss_total_1mo" = "1",
                             "cdss_total_2mo" = "2",
                             "cdss_total_3mo" = "3",
                             "cdss_total_6mo" = "6",
                             "cdss_total_9mo" = "9",
                             "cdss_total_12mo" = "12",
                             "cdss_total_18mo" = "18",
                             "cdss_total_24mo" = "24"),
         time_point = as.numeric(time_point))

PEPP_cdss_long_18 <- PEPP_cdss_long %>%
  filter(!time_point %in% c(24)) %>%
  group_by(pin) %>%
  filter(sum(!is.na(cdss_score)) >= 2) %>%
  ungroup()

## Subsetting CDSS scores into LV1
PEPP_cdss_subset <- PEPP_cdss_subset %>%
  mutate(
    gen_dep_comp_baseline = cdss_1_baseline + cdss_2_baseline + cdss_3_baseline + cdss_6_baseline + cdss_8_baseline,
    gen_dep_comp_1mo = cdss_1_1mo + cdss_2_1mo + cdss_3_1mo + cdss_6_1mo + cdss_8_1mo,
    gen_dep_comp_2mo = cdss_1_2mo + cdss_2_2mo + cdss_3_2mo + cdss_6_2mo + cdss_8_2mo,
    gen_dep_comp_3mo = cdss_1_3mo + cdss_2_3mo + cdss_3_3mo + cdss_6_3mo + cdss_8_3mo,
    gen_dep_comp_6mo = cdss_1_6mo + cdss_2_6mo + cdss_3_6mo + cdss_6_6mo + cdss_8_6mo,
    gen_dep_comp_9mo = cdss_1_9mo + cdss_2_9mo + cdss_3_9mo + cdss_6_9mo + cdss_8_9mo,
    gen_dep_comp_12mo = cdss_1_12mo + cdss_2_12mo + cdss_3_12mo + cdss_6_12mo + cdss_8_12mo,
    gen_dep_comp_18mo = cdss_1_18mo + cdss_2_18mo + cdss_3_18mo + cdss_6_18mo + cdss_8_18mo,
    gen_dep_comp_24mo = cdss_1_24mo + cdss_2_24mo + cdss_3_24mo + cdss_6_24mo + cdss_8_24mo
  )

## LV1
PEPP_LV1_long <- 
  PEPP_cdss_subset %>%
  select(pin, gen_dep_comp_baseline, gen_dep_comp_1mo, gen_dep_comp_2mo, gen_dep_comp_3mo,
         gen_dep_comp_6mo, gen_dep_comp_9mo, gen_dep_comp_12mo, gen_dep_comp_18mo, gen_dep_comp_24mo) %>%
  pivot_longer(cols = starts_with("gen_dep_comp_"), names_to = "time_point", values_to = "LV1_score")

PEPP_LV1_long <- PEPP_LV1_long %>%
  mutate(pin = as.numeric(pin),
         time_point = recode(time_point,
                             "gen_dep_comp_baseline" = "0",
                             "gen_dep_comp_1mo" = "1",
                             "gen_dep_comp_2mo" = "2",
                             "gen_dep_comp_3mo" = "3",
                             "gen_dep_comp_6mo" = "6",
                             "gen_dep_comp_9mo" = "9",
                             "gen_dep_comp_12mo" = "12",
                             "gen_dep_comp_18mo" = "18",
                             "gen_dep_comp_24mo" = "24"),
         time_point = as.numeric(time_point))

PEPP_LV1_long_18 <- PEPP_LV1_long %>%
  filter(!time_point %in% c(24)) %>%
  group_by(pin) %>%
  filter(sum(!is.na(LV1_score)) >= 2) %>%
  ungroup()

## Total SANS
PEPP_sans_long <- 
  PEPP_sans_subset %>%
  select(pin, sans_total_baseline, sans_total_1mo, sans_total_2mo, sans_total_3mo,
         sans_total_6mo, sans_total_9mo, sans_total_12mo, sans_total_18mo, 
         sans_total_24mo) %>%
  pivot_longer(cols = starts_with("sans_total_"), names_to = "time_point", values_to = "sans_score")

PEPP_sans_long <- PEPP_sans_long %>%
  mutate(pin = as.numeric(pin),
         time_point = recode(time_point,
                             "sans_total_baseline" = "0",
                             "sans_total_1mo" = "1",
                             "sans_total_2mo" = "2",
                             "sans_total_3mo" = "3",
                             "sans_total_6mo" = "6",
                             "sans_total_9mo" = "9",
                             "sans_total_12mo" = "12",
                             "sans_total_18mo" = "18",
                             "sans_total_24mo" = "24"),
         time_point = as.numeric(time_point))

PEPP_sans_long_18 <- PEPP_sans_long %>%
  filter(!time_point %in% c(24)) %>%
  group_by(pin) %>%
  filter(sum(!is.na(sans_score)) >= 2) %>%
  ungroup()

### TRAJECTORY MODELING (random intercept, random slope) ------ start here
## CDSS
set.seed(123)

gmm1_2_CDSS_18 <- lcmm::hlme(cdss_score ~ time_point, subject = "pin", random =~1 + 
                              time_point, ng = 1, data = PEPP_cdss_long_18)
gmm2_2_CDSS_18 <- gridsearch(rep = 100, maxiter = 200, minit= gmm1_2_CDSS_18, 
                            m = hlme(cdss_score ~ time_point, subject = "pin",
                                     random=~1 + time_point ,ng = 2, data = 
                                       PEPP_cdss_long_18, mixture 
                                     =~time_point, nwg = T))
gmm3_2_CDSS_18 <- gridsearch(rep = 100, maxiter =200, minit= gmm1_2_CDSS_18, 
                            m = hlme(cdss_score ~ time_point, subject = "pin", 
                                     random=~1 + time_point,
                                     ng = 3, data = PEPP_cdss_long_18, mixture
                                     =~time_point, nwg = T))
gmm4_2_CDSS_18 <- gridsearch(rep = 100, maxiter = 200, minit= gmm1_2_CDSS_18, 
                            m = hlme(cdss_score ~ time_point, subject = "pin", 
                                     random=~1 + time_point,
                                     ng = 4, data = PEPP_cdss_long_18, mixture
                                     =~time_point, nwg = T))
gmm5_2_CDSS_18 <- gridsearch(rep = 100, maxiter = 200, minit= gmm1_2_CDSS_18, 
                            m = hlme(cdss_score ~ time_point, subject = "pin",
                                     random=~1 + time_point,
                                     ng = 5, data = PEPP_cdss_long_18, mixture
                                     =~time_point, nwg = T))

#make table with results for the 5 models
mod_com_gmm2_CDSS <- summarytable(gmm1_2_CDSS_18, gmm2_2_CDSS_18, gmm3_2_CDSS_18,
                                  gmm4_2_CDSS_18, gmm5_2_CDSS_18)
mod_com_gmm2_CDSS <- as.data.frame(mod_com_gmm2_CDSS)
# Extract the model with the lowest BIC
lowest_bic_mod_gmm2_CDSS <- which.min(mod_com_gmm2_CDSS$BIC)
cat("The model with the lowest BIC is: gmm2_", lowest_bic_mod_gmm2_CDSS, "\n")


# Extract cluster assignments from each GMM model
df1_CDSS <- gmm1_2_CDSS_18$pprob[,1:2] %>% rename(Class1 = class)
df2_CDSS <- gmm2_2_CDSS_18$pprob[,1:2] %>% rename(Class2 = class)
df3_CDSS <- gmm3_2_CDSS_18$pprob[,1:2] %>% rename(Class3 = class)
df4_CDSS <- gmm4_2_CDSS_18$pprob[,1:2] %>% rename(Class4 = class)
df5_CDSS <- gmm5_2_CDSS_18$pprob[,1:2] %>% rename(Class5 = class)

# Merge datasets by pin
df_CDSS <- reduce(list(df1_CDSS, df2_CDSS, df3_CDSS, df4_CDSS, 
                       df5_CDSS), left_join, by = "pin")

# Convert to long format
df_long_CDSS <- df_CDSS %>%
  pivot_longer(cols = starts_with("Class"), 
               names_to = "Model", 
               values_to = "Cluster") %>%
  mutate(Model = as.factor(gsub("Class", "", Model)),  # Convert Model to factor
         Cluster = as.factor(Cluster))  # Ensure Cluster is categorical

# Check structure
str(df_long_CDSS)
# Set color palette based on max number of clusters
num_clusters <- length(unique(df_long_CDSS$Cluster))
palette_colors <- RColorBrewer::brewer.pal(n = min(num_clusters, 12), name = "Set1")  # Use up to 12 colors

# Alluvial plot
ggplot(df_long_CDSS, aes(x = Model, stratum = Cluster, alluvium = pin, fill = Cluster)) +
  geom_flow(stat = "alluvium", alpha = 0.7) +  # Flow connections
  geom_stratum(alpha = 0.8) +  # Cluster strata
  scale_x_discrete(limits = as.character(1:6)) +  # Ensure all models appear
  scale_fill_manual(values = palette_colors) +  # Apply custom color palette
  labs(title = "Changes in Class Membership Across GMM Models",
       x = "Number of Classes in Model",
       y = "Count of Individuals") +
  theme_minimal()

# Extract probabilities from the gmm model - THIS IS WHERE BICS ARE COMPARED ARE MADE
# Change the other number as the last probability according to n of gmm +2 (e.g. gmm2 = 3:4)

## First model
probabilities_CDSS = gmm2_2_CDSS_18$pprob[, 3:4]

heatmap_data_CDSS <- as.matrix(probabilities_CDSS)
rownames(heatmap_data_CDSS) <- gmm2_2_CDSS_18$pprob$pin

heatmap_long_CDSS <- melt(heatmap_data_CDSS)
colnames(heatmap_long_CDSS) <- c("Pin", "Class", "Probability")

heatmap_long_CDSS$Max_Prob_Class <- apply(heatmap_data_CDSS, 1, function(x) which.max(x))

heatmap_long_CDSS$Pin <- factor(heatmap_long_CDSS$Pin, 
                                levels = unique(heatmap_long_CDSS$Pin[order(heatmap_long_CDSS$Max_Prob_Class)]))

# Plot heatmap
ggplot(heatmap_long_CDSS, aes(x = Class, y = Pin, fill = Probability)) +
  geom_tile() +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  labs(title = "Soft Assignment: Membership Probabilities Heatmap", x = "Latent Class", y = "Pin") +
  theme_minimal()

trajectory_CDSS <- as.data.frame(gmm2_2_CDSS_18$pprob[, 1:2])

PEPP_cdss_plotting <- PEPP_cdss_long_18 %>%
  left_join(trajectory_CDSS, by = "pin") %>%
  mutate(class = factor(class)) 

# Plotting
PEPP_cdss_plotting %>%
  ggplot(aes(x = time_point, y = cdss_score, group = pin, color = class)) +
  geom_line(alpha = 0.1, size = 0.5) +  # Make lines more transparent and thinner
  geom_smooth(aes(group = class), method = "loess", size = 2, se = TRUE, alpha = 0.4) +  # Match SE band color with lines
  scale_x_continuous(breaks = unique(PEPP_cdss_plotting$time_point)) +
  labs(x = "Time Point (Months)", y = "CDSS Composite Score", colour = "Latent Class") +
  geom_point(size = 1, alpha = 0.1) +  # Smaller and more transparent points
  labs(title = "CDSS Composite Score Over Time") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels for readability
  #guides(color = "none", fill = "none") +  # Remove the legend for fill (SE band)
  scale_color_manual(values = RColorBrewer::brewer.pal(n = length(unique(PEPP_cdss_plotting$class)), name = "Set1")) +  # Distinct colors
  theme_classic()

PEPP_cdss_plotting %>%
  ggplot(aes(x = time_point, y = cdss_score, group = pin, color = class)) +
  geom_line(alpha = 0.1, size = 0.5) +  # Make lines more transparent and thinner
  geom_smooth(aes(group = class), method = "loess", size = 2, se = TRUE, alpha = 0.4) +  # Match SE band color with lines
  scale_x_continuous(breaks = unique(PEPP_cdss_plotting$time_point)) +
  labs(x = "Time Point (Months)", y = "CDSS Composite Score", colour = "Latent Class") +
  geom_point(size = 1, alpha = 0.1) +  # Smaller and more transparent points
  labs(title = "CDSS Composite Score Over Time") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels for readability
  #guides(color = "none", fill = "none") +  # Remove the legend for fill (SE band)
  scale_color_manual(values = RColorBrewer::brewer.pal(n = length(unique(PEPP_cdss_plotting$class)), name = "Set1")) +  # Distinct colors
  theme_classic()+
  facet_wrap(~ class,ncol = 2)  # Facet by latent class






## Second model
prob_CDSS = gmm4_2_CDSS_18$pprob[, 3:6]

hm_data_CDSS <- as.matrix(prob_CDSS)
rownames(hm_data_CDSS) <- gmm4_2_CDSS_18$pprob$pin

hm_long_CDSS <- melt(hm_data_CDSS)
colnames(hm_long_CDSS) <- c("Pin", "Class", "Probability")

hm_long_CDSS$Max_Prob_Class <- apply(hm_data_CDSS, 1, function(x) which.max(x))

hm_long_CDSS$Pin <- factor(hm_long_CDSS$Pin, levels = unique(hm_long_CDSS$Pin[order(hm_long_CDSS$Max_Prob_Class)]))

# Plot heatmap
ggplot(hm_long_CDSS, aes(x = Class, y = Pin, fill = Probability)) +
  geom_tile() +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  labs(title = "Soft Assignment: Membership Probabilities Heatmap", x = "Latent Class", y = "Pin") +
  theme_minimal()

traj_CDSS <- as.data.frame(gmm4_2_CDSS_18$pprob[, 1:2])

PEPP_cdss_plotting_2 <- PEPP_cdss_long_18 %>%
  left_join(traj_CDSS, by = "pin") %>%
  mutate(class = factor(class)) 

# Plotting
PEPP_cdss_plotting_2 %>%
  ggplot(aes(x = time_point, y = cdss_score, group = pin, color = class)) +
  geom_line(alpha = 0.1, size = 0.5) +  # Make lines more transparent and thinner
  geom_smooth(aes(group = class), method = "loess", size = 2, se = TRUE, alpha = 0.4) +  # Match SE band color with lines
  scale_x_continuous(breaks = unique(PEPP_cdss_plotting_2$time_point)) +
  labs(x = "Time Point (Months)", y = "CDSS Composite Score", colour = "Latent Class") +
  geom_point(size = 1, alpha = 0.1) +  # Smaller and more transparent points
  labs(title = "CDSS Composite Score Over Time") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels for readability
  #guides(color = "none", fill = "none") +  # Remove the legend for fill (SE band)
  scale_color_manual(values = RColorBrewer::brewer.pal(n = length(unique(PEPP_cdss_plotting_2$class)), name = "Set1")) +  # Distinct colors
  theme_classic()

PEPP_cdss_plotting_2 %>%
  ggplot(aes(x = time_point, y = cdss_score, group = pin, color = class)) +
  geom_line(alpha = 0.1, size = 0.5) +  # Make lines more transparent and thinner
  geom_smooth(aes(group = class), method = "loess", size = 2, se = TRUE, alpha = 0.4) +  # Match SE band color with lines
  scale_x_continuous(breaks = unique(PEPP_cdss_plotting_2$time_point)) +
  labs(x = "Time Point (Months)", y = "CDSS Composite Score", colour = "Latent Class") +
  geom_point(size = 1, alpha = 0.1) +  # Smaller and more transparent points
  labs(title = "CDSS Composite Score Over Time") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels for readability
  #guides(color = "none", fill = "none") +  # Remove the legend for fill (SE band)
  scale_color_manual(values = RColorBrewer::brewer.pal(n = length(unique(PEPP_cdss_plotting_2$class)), name = "Set1")) +  # Distinct colors
  theme_classic()+
  facet_wrap(~ class,ncol = 2)  # Facet by latent class









## ============================================================================
## SANS
set.seed(123)

gmm1_2_sans_18 <- lcmm::hlme(sans_score ~ time_point, subject = "pin", random =~1 + 
                               time_point, ng = 1, data = PEPP_sans_long_18)
gmm2_2_sans_18 <- gridsearch(rep = 100, maxiter = 200, minit= gmm1_2_sans_18, 
                             m = hlme(sans_score ~ time_point, subject = "pin",
                                      random=~1 + time_point ,ng = 2, data = 
                                        PEPP_sans_long_18, mixture 
                                      =~time_point, nwg = T))
gmm3_2_sans_18 <- gridsearch(rep = 100, maxiter =200, minit= gmm1_2_sans_18, 
                             m = hlme(sans_score ~ time_point, subject = "pin", 
                                      random=~1 + time_point,
                                      ng = 3, data = PEPP_sans_long_18, mixture
                                      =~time_point, nwg = T))
gmm4_2_sans_18 <- gridsearch(rep = 100, maxiter = 200, minit= gmm1_2_sans_18, 
                             m = hlme(sans_score ~ time_point, subject = "pin", 
                                      random=~1 + time_point,
                                      ng = 4, data = PEPP_sans_long_18, mixture
                                      =~time_point, nwg = T))
gmm5_2_sans_18 <- gridsearch(rep = 100, maxiter = 200, minit= gmm1_2_sans_18, 
                             m = hlme(sans_score ~ time_point, subject = "pin",
                                      random=~1 + time_point,
                                      ng = 5, data = PEPP_sans_long_18, mixture
                                      =~time_point, nwg = T))

#make table with results for the 5 models
mod_com_gmm2_sans <- summarytable(gmm1_2_sans_18, gmm2_2_sans_18, gmm3_2_sans_18,
                                  gmm4_2_sans_18, gmm5_2_sans_18)
mod_com_gmm2_sans <- as.data.frame(mod_com_gmm2_sans)
# Extract the model with the lowest BIC
lowest_bic_mod_gmm2_sans <- which.min(mod_com_gmm2_sans$BIC)
cat("The model with the lowest BIC is: gmm2_", lowest_bic_mod_gmm2_sans, "\n")


# Extract cluster assignments from each GMM model
df1_sans <- gmm1_2_sans_18$pprob[,1:2] %>% rename(Class1 = class)
df2_sans <- gmm2_2_sans_18$pprob[,1:2] %>% rename(Class2 = class)
df3_sans <- gmm3_2_sans_18$pprob[,1:2] %>% rename(Class3 = class)
df4_sans <- gmm4_2_sans_18$pprob[,1:2] %>% rename(Class4 = class)
df5_sans <- gmm5_2_sans_18$pprob[,1:2] %>% rename(Class5 = class)

# Merge datasets by pin
df_sans <- reduce(list(df1_sans, df2_sans, df3_sans, df4_sans, 
                       df5_sans), left_join, by = "pin")

# Convert to long format
df_long_sans <- df_sans %>%
  pivot_longer(cols = starts_with("Class"), 
               names_to = "Model", 
               values_to = "Cluster") %>%
  mutate(Model = as.factor(gsub("Class", "", Model)),  # Convert Model to factor
         Cluster = as.factor(Cluster))  # Ensure Cluster is categorical

# Check structure
str(df_long_sans)
# Set color palette based on max number of clusters
num_clusters <- length(unique(df_long_sans$Cluster))
palette_colors <- RColorBrewer::brewer.pal(n = min(num_clusters, 12), name = "Set1")  # Use up to 12 colors

# Alluvial plot
ggplot(df_long_sans, aes(x = Model, stratum = Cluster, alluvium = pin, fill = Cluster)) +
  geom_flow(stat = "alluvium", alpha = 0.7) +  # Flow connections
  geom_stratum(alpha = 0.8) +  # Cluster strata
  scale_x_discrete(limits = as.character(1:6)) +  # Ensure all models appear
  scale_fill_manual(values = palette_colors) +  # Apply custom color palette
  labs(title = "Changes in Class Membership Across GMM Models",
       x = "Number of Classes in Model",
       y = "Count of Individuals") +
  theme_minimal()

# Extract probabilities from the gmm model - THIS IS WHERE BICS ARE COMPARED ARE MADE
# Change the other number as the last probability according to n of gmm +2 (e.g. gmm2 = 3:4)

## First model
probabilities_sans = gmm2_2_sans_18$pprob[, 3:4]

heatmap_data_sans <- as.matrix(probabilities_sans)
rownames(heatmap_data_sans) <- gmm2_2_sans_18$pprob$pin

heatmap_long_sans <- melt(heatmap_data_sans)
colnames(heatmap_long_sans) <- c("Pin", "Class", "Probability")

heatmap_long_sans$Max_Prob_Class <- apply(heatmap_data_sans, 1, function(x) which.max(x))

heatmap_long_sans$Pin <- factor(heatmap_long_sans$Pin, 
                                levels = unique(heatmap_long_sans$Pin[order(heatmap_long_sans$Max_Prob_Class)]))

# Plot heatmap
ggplot(heatmap_long_sans, aes(x = Class, y = Pin, fill = Probability)) +
  geom_tile() +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  labs(title = "Soft Assignment: Membership Probabilities Heatmap", x = "Latent Class", y = "Pin") +
  theme_minimal()

trajectory_sans <- as.data.frame(gmm2_2_sans_18$pprob[, 1:2])

PEPP_sans_plotting <- PEPP_sans_long_18 %>%
  left_join(trajectory_sans, by = "pin") %>%
  mutate(class = factor(class)) 

# Plotting
PEPP_sans_plotting %>%
  ggplot(aes(x = time_point, y = sans_score, group = pin, color = class)) +
  geom_line(alpha = 0.1, size = 0.5) +  # Make lines more transparent and thinner
  geom_smooth(aes(group = class), method = "loess", size = 2, se = TRUE, alpha = 0.4) +  # Match SE band color with lines
  scale_x_continuous(breaks = unique(PEPP_sans_plotting$time_point)) +
  labs(x = "Time Point (Months)", y = "SANS Composite Score", colour = "Latent Class") +
  geom_point(size = 1, alpha = 0.1) +  # Smaller and more transparent points
  labs(title = "SANS Composite Score Over Time") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels for readability
  #guides(color = "none", fill = "none") +  # Remove the legend for fill (SE band)
  scale_color_manual(values = RColorBrewer::brewer.pal(n = length(unique(PEPP_sans_plotting$class)), name = "Set1")) +  # Distinct colors
  theme_classic()

PEPP_sans_plotting %>%
  ggplot(aes(x = time_point, y = sans_score, group = pin, color = class)) +
  geom_line(alpha = 0.1, size = 0.5) +  # Make lines more transparent and thinner
  geom_smooth(aes(group = class), method = "loess", size = 2, se = TRUE, alpha = 0.4) +  # Match SE band color with lines
  scale_x_continuous(breaks = unique(PEPP_sans_plotting$time_point)) +
  labs(x = "Time Point (Months)", y = "SANS Composite Score", colour = "Latent Class") +
  geom_point(size = 1, alpha = 0.1) +  # Smaller and more transparent points
  labs(title = "SANS Composite Score Over Time") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels for readability
  #guides(color = "none", fill = "none") +  # Remove the legend for fill (SE band)
  scale_color_manual(values = RColorBrewer::brewer.pal(n = length(unique(PEPP_sans_plotting$class)), name = "Set1")) +  # Distinct colors
  theme_classic()+
  facet_wrap(~ class,ncol = 2)  # Facet by latent class






## Second model
prob_sans = gmm4_2_sans_18$pprob[, 3:6]

hm_data_sans <- as.matrix(prob_sans)
rownames(hm_data_sans) <- gmm4_2_sans_18$pprob$pin

hm_long_sans <- melt(hm_data_sans)
colnames(hm_long_sans) <- c("Pin", "Class", "Probability")

hm_long_sans$Max_Prob_Class <- apply(hm_data_sans, 1, function(x) which.max(x))

hm_long_sans$Pin <- factor(hm_long_sans$Pin, levels = unique(hm_long_sans$Pin[order(hm_long_sans$Max_Prob_Class)]))

# Plot heatmap
ggplot(hm_long_sans, aes(x = Class, y = Pin, fill = Probability)) +
  geom_tile() +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  labs(title = "Soft Assignment: Membership Probabilities Heatmap", x = "Latent Class", y = "Pin") +
  theme_minimal()

traj_sans <- as.data.frame(gmm4_2_sans_18$pprob[, 1:2])

PEPP_sans_plotting_2 <- PEPP_sans_long_18 %>%
  left_join(traj_sans, by = "pin") %>%
  mutate(class = factor(class)) 

# Plotting
PEPP_sans_plotting_2 %>%
  ggplot(aes(x = time_point, y = sans_score, group = pin, color = class)) +
  geom_line(alpha = 0.1, size = 0.5) +  # Make lines more transparent and thinner
  geom_smooth(aes(group = class), method = "loess", size = 2, se = TRUE, alpha = 0.4) +  # Match SE band color with lines
  scale_x_continuous(breaks = unique(PEPP_sans_plotting_2$time_point)) +
  labs(x = "Time Point (Months)", y = "SANS Composite Score", colour = "Latent Class") +
  geom_point(size = 1, alpha = 0.1) +  # Smaller and more transparent points
  labs(title = "SANS Composite Score Over Time") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels for readability
  #guides(color = "none", fill = "none") +  # Remove the legend for fill (SE band)
  scale_color_manual(values = RColorBrewer::brewer.pal(n = length(unique(PEPP_sans_plotting_2$class)), name = "Set1")) +  # Distinct colors
  theme_classic()

PEPP_sans_plotting_2 %>%
  ggplot(aes(x = time_point, y = sans_score, group = pin, color = class)) +
  geom_line(alpha = 0.1, size = 0.5) +  # Make lines more transparent and thinner
  geom_smooth(aes(group = class), method = "loess", size = 2, se = TRUE, alpha = 0.4) +  # Match SE band color with lines
  scale_x_continuous(breaks = unique(PEPP_sans_plotting_2$time_point)) +
  labs(x = "Time Point (Months)", y = "SANS Composite Score", colour = "Latent Class") +
  geom_point(size = 1, alpha = 0.1) +  # Smaller and more transparent points
  labs(title = "SANS Composite Score Over Time") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels for readability
  #guides(color = "none", fill = "none") +  # Remove the legend for fill (SE band)
  scale_color_manual(values = RColorBrewer::brewer.pal(n = length(unique(PEPP_LV1_plotting_2$class)), name = "Set1")) +  # Distinct colors
  theme_classic()+
  facet_wrap(~ class,ncol = 2)  # Facet by latent class





##=============================================================================
## LV1 - General Depressive
set.seed(123)

gmm1_2_LV1_18 <- lcmm::hlme(LV1_score ~ time_point, subject = "pin", random =~1 + 
                               time_point, ng = 1, data = PEPP_LV1_long_18)
gmm2_2_LV1_18 <- gridsearch(rep = 100, maxiter = 200, minit= gmm1_2_LV1_18, 
                             m = hlme(LV1_score ~ time_point, subject = "pin",
                                      random=~1 + time_point ,ng = 2, data = 
                                        PEPP_LV1_long_18, mixture 
                                      =~time_point, nwg = T))
gmm3_2_LV1_18 <- gridsearch(rep = 100, maxiter =200, minit= gmm1_2_LV1_18, 
                             m = hlme(LV1_score ~ time_point, subject = "pin", 
                                      random=~1 + time_point,
                                      ng = 3, data = PEPP_LV1_long_18, mixture
                                      =~time_point, nwg = T))
gmm4_2_LV1_18 <- gridsearch(rep = 100, maxiter = 200, minit= gmm1_2_LV1_18, 
                             m = hlme(LV1_score ~ time_point, subject = "pin", 
                                      random=~1 + time_point,
                                      ng = 4, data = PEPP_LV1_long_18, mixture
                                      =~time_point, nwg = T))
gmm5_2_LV1_18 <- gridsearch(rep = 100, maxiter = 200, minit= gmm1_2_LV1_18, 
                             m = hlme(LV1_score ~ time_point, subject = "pin",
                                      random=~1 + time_point,
                                      ng = 5, data = PEPP_LV1_long_18, mixture
                                      =~time_point, nwg = T))

#make table with results for the 5 models
mod_com_gmm2_LV1 <- summarytable(gmm1_2_LV1_18, gmm2_2_LV1_18, gmm3_2_LV1_18,
                                  gmm4_2_LV1_18, gmm5_2_LV1_18)
mod_com_gmm2_LV1 <- as.data.frame(mod_com_gmm2_LV1)
# Extract the model with the lowest BIC
lowest_bic_mod_gmm2_LV1 <- which.min(mod_com_gmm2_LV1$BIC)
cat("The model with the lowest BIC is: gmm2_", lowest_bic_mod_gmm2_LV1, "\n")


# Extract cluster assignments from each GMM model
df1_LV1 <- gmm1_2_LV1_18$pprob[,1:2] %>% rename(Class1 = class)
df2_LV1 <- gmm2_2_LV1_18$pprob[,1:2] %>% rename(Class2 = class)
df3_LV1 <- gmm3_2_LV1_18$pprob[,1:2] %>% rename(Class3 = class)
df4_LV1 <- gmm4_2_LV1_18$pprob[,1:2] %>% rename(Class4 = class)
df5_LV1 <- gmm5_2_LV1_18$pprob[,1:2] %>% rename(Class5 = class)

# Merge datasets by pin
df_LV1 <- reduce(list(df1_LV1, df2_LV1, df3_LV1, df4_LV1, 
                       df5_LV1), left_join, by = "pin")

# Convert to long format
df_long_LV1 <- df_LV1 %>%
  pivot_longer(cols = starts_with("Class"), 
               names_to = "Model", 
               values_to = "Cluster") %>%
  mutate(Model = as.factor(gsub("Class", "", Model)),  # Convert Model to factor
         Cluster = as.factor(Cluster))  # Ensure Cluster is categorical

# Check structure
str(df_long_LV1)
# Set color palette based on max number of clusters
num_clusters <- length(unique(df_long_LV1$Cluster))
palette_colors <- RColorBrewer::brewer.pal(n = min(num_clusters, 12), name = "Set1")  # Use up to 12 colors

# Alluvial plot
ggplot(df_long_LV1, aes(x = Model, stratum = Cluster, alluvium = pin, fill = Cluster)) +
  geom_flow(stat = "alluvium", alpha = 0.7) +  # Flow connections
  geom_stratum(alpha = 0.8) +  # Cluster strata
  scale_x_discrete(limits = as.character(1:6)) +  # Ensure all models appear
  scale_fill_manual(values = palette_colors) +  # Apply custom color palette
  labs(title = "Changes in Class Membership Across GMM Models",
       x = "Number of Classes in Model",
       y = "Count of Individuals") +
  theme_minimal()

# Extract probabilities from the gmm model - THIS IS WHERE BICS ARE COMPARED ARE MADE
# Change the other number as the last probability according to n of gmm +2 (e.g. gmm2 = 3:4)

## First model
probabilities_LV1 = gmm2_2_LV1_18$pprob[, 3:4]

heatmap_data_LV1 <- as.matrix(probabilities_LV1)
rownames(heatmap_data_LV1) <- gmm2_2_LV1_18$pprob$pin

heatmap_long_LV1 <- melt(heatmap_data_LV1)
colnames(heatmap_long_LV1) <- c("Pin", "Class", "Probability")

heatmap_long_LV1$Max_Prob_Class <- apply(heatmap_data_LV1, 1, function(x) which.max(x))

heatmap_long_LV1$Pin <- factor(heatmap_long_LV1$Pin, 
                                levels = unique(heatmap_long_LV1$Pin[order(heatmap_long_LV1$Max_Prob_Class)]))

# Plot heatmap
ggplot(heatmap_long_LV1, aes(x = Class, y = Pin, fill = Probability)) +
  geom_tile() +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  labs(title = "Soft Assignment: Membership Probabilities Heatmap", x = "Latent Class", y = "Pin") +
  theme_minimal()

trajectory_LV1 <- as.data.frame(gmm2_2_LV1_18$pprob[, 1:2])

PEPP_LV1_plotting <- PEPP_LV1_long_18 %>%
  left_join(trajectory_LV1, by = "pin") %>%
  mutate(class = factor(class)) 

# Plotting
PEPP_LV1_plotting %>%
  ggplot(aes(x = time_point, y = LV1_score, group = pin, color = class)) +
  geom_line(alpha = 0.1, size = 0.5) +  # Make lines more transparent and thinner
  geom_smooth(aes(group = class), method = "loess", size = 2, se = TRUE, alpha = 0.4) +  # Match SE band color with lines
  scale_x_continuous(breaks = unique(PEPP_LV1_plotting$time_point)) +
  labs(x = "Time Point (Months)", y = "CDSS General Depressive Composite Score", colour = "Latent Class") +
  geom_point(size = 1, alpha = 0.1) +  # Smaller and more transparent points
  labs(title = "CDSS General Depressive Composite Score Over Time") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels for readability
  #guides(color = "none", fill = "none") +  # Remove the legend for fill (SE band)
  scale_color_manual(values = RColorBrewer::brewer.pal(n = length(unique(PEPP_LV1_plotting$class)), name = "Set1")) +  # Distinct colors
  theme_classic()

PEPP_LV1_plotting %>%
  ggplot(aes(x = time_point, y = LV1_score, group = pin, color = class)) +
  geom_line(alpha = 0.1, size = 0.5) +  # Make lines more transparent and thinner
  geom_smooth(aes(group = class), method = "loess", size = 2, se = TRUE, alpha = 0.4) +  # Match SE band color with lines
  scale_x_continuous(breaks = unique(PEPP_LV1_plotting$time_point)) +
  labs(x = "Time Point (Months)", y = "CDSS General Depressive Composite Score", colour = "Latent Class") +
  geom_point(size = 1, alpha = 0.1) +  # Smaller and more transparent points
  labs(title = "CDSS General Depressive Composite Score Over Time") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels for readability
  #guides(color = "none", fill = "none") +  # Remove the legend for fill (SE band)
  scale_color_manual(values = RColorBrewer::brewer.pal(n = length(unique(PEPP_LV1_plotting$class)), name = "Set1")) +  # Distinct colors
  theme_classic()+
  facet_wrap(~ class,ncol = 2)  # Facet by latent class






## Second model
prob_LV1 = gmm3_2_LV1_18$pprob[, 3:5]

hm_data_LV1 <- as.matrix(prob_LV1)
rownames(hm_data_LV1) <- gmm3_2_LV1_18$pprob$pin

hm_long_LV1 <- melt(hm_data_LV1)
colnames(hm_long_LV1) <- c("Pin", "Class", "Probability")

hm_long_LV1$Max_Prob_Class <- apply(hm_data_LV1, 1, function(x) which.max(x))

hm_long_LV1$Pin <- factor(hm_long_LV1$Pin, levels = unique(hm_long_LV1$Pin[order(hm_long_LV1$Max_Prob_Class)]))

# Plot heatmap
ggplot(hm_long_LV1, aes(x = Class, y = Pin, fill = Probability)) +
  geom_tile() +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  labs(title = "Soft Assignment: Membership Probabilities Heatmap", x = "Latent Class", y = "Pin") +
  theme_minimal()

traj_LV1 <- as.data.frame(gmm3_2_LV1_18$pprob[, 1:2])

PEPP_LV1_plotting_2 <- PEPP_LV1_long_18 %>%
  left_join(traj_LV1, by = "pin") %>%
  mutate(class = factor(class)) 

# Plotting
PEPP_LV1_plotting_2 %>%
  ggplot(aes(x = time_point, y = LV1_score, group = pin, color = class)) +
  geom_line(alpha = 0.1, size = 0.5) +  # Make lines more transparent and thinner
  geom_smooth(aes(group = class), method = "loess", size = 2, se = TRUE, alpha = 0.4) +  # Match SE band color with lines
  scale_x_continuous(breaks = unique(PEPP_LV1_plotting_2$time_point)) +
  labs(x = "Time Point (Months)", y = "CDSS General Depressive Composite Score", colour = "Latent Class") +
  geom_point(size = 1, alpha = 0.1) +  # Smaller and more transparent points
  labs(title = "CDSS General Depressive Composite Score Over Time") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels for readability
  #guides(color = "none", fill = "none") +  # Remove the legend for fill (SE band)
  scale_color_manual(values = RColorBrewer::brewer.pal(n = length(unique(PEPP_LV1_plotting_2$class)), name = "Set1")) +  # Distinct colors
  theme_classic()

PEPP_LV1_plotting_2 %>%
  ggplot(aes(x = time_point, y = LV1_score, group = pin, color = class)) +
  geom_line(alpha = 0.1, size = 0.5) +  # Make lines more transparent and thinner
  geom_smooth(aes(group = class), method = "loess", size = 2, se = TRUE, alpha = 0.4) +  # Match SE band color with lines
  scale_x_continuous(breaks = unique(PEPP_LV1_plotting_2$time_point)) +
  labs(x = "Time Point (Months)", y = "CDSS General Depressive Composite Score", colour = "Latent Class") +
  geom_point(size = 1, alpha = 0.1) +  # Smaller and more transparent points
  labs(title = "CDSS General Depressive Composite Score Over Time") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels for readability
  #guides(color = "none", fill = "none") +  # Remove the legend for fill (SE band)
  scale_color_manual(values = RColorBrewer::brewer.pal(n = length(unique(PEPP_LV1_plotting_2$class)), name = "Set1")) +  # Distinct colors
  theme_classic()+
  facet_wrap(~ class,ncol = 2)  # Facet by latent class
